{"version":3,"file":"static/js/636.4064eb2a.chunk.js","mappings":"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","sources":["component/post-content/index.js","container/post-item/index.js"],"sourcesContent":["import { memo, useContext } from \"react\";\r\nimport \"./index.css\";\r\nimport Grid from \"../grid\";\r\nimport { ThemeContext } from \"../../App\";\r\n\r\nfunction Component({ username, date, text }) {\r\n  const { value: theme } = useContext(ThemeContext);\r\n  return (\r\n    <Grid>\r\n      <div className=\"post-content\">\r\n        <span\r\n          style={{\r\n            color: `var(--${theme}-text-color-user)`,\r\n          }}\r\n          className=\"post-content__username\"\r\n        >\r\n          @{username}\r\n        </span>\r\n        <span\r\n          style={{\r\n            color: `var(--${theme}-text-color-date)`,\r\n          }}\r\n          className=\"post-content__date\"\r\n        >\r\n          {date}\r\n        </span>\r\n      </div>\r\n      <p\r\n        style={{\r\n          color: `var(--${theme}-text-color)`,\r\n        }}\r\n        className=\"post-content__text\"\r\n      >\r\n        {text}\r\n      </p>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default memo(Component);\r\n","// file post-item.js\r\nimport { useState, Fragment, useEffect, useReducer, useCallback } from \"react\";\r\n\r\nimport Grid from \"../../component/grid\";\r\nimport Box from \"../../component/box\";\r\n\r\nimport PostCreate from \"../post-create\";\r\n\r\nimport { Alert, Skeleton, LOAD_STATUS } from \"../../component/load\";\r\n\r\nimport { getDate } from \"../../util/getDate\";\r\n\r\nimport PostContent from \"../../component/post-content\";\r\n\r\nimport {\r\n  requestInitialState,\r\n  requestReducer,\r\n  REQUEST_ACTION_TYPE,\r\n} from \"../../util/request\";\r\n\r\nexport default function Container({ id, username, text, date }) {\r\n  const [state, dispatch] = useReducer(\r\n    requestReducer,\r\n    requestInitialState,\r\n    (state) => ({ ...state, data: { id, username, text, date, reply: null } })\r\n  );\r\n\r\n  // const [status, setStatus] = useState(null);\r\n  // const [message, setMessage] = useState(\"\");\r\n\r\n  const getData = useCallback(async () => {\r\n    dispatch({ type: REQUEST_ACTION_TYPE.PROGRESS });\r\n    try {\r\n      const res = await fetch(\r\n        `http://localhost:4000/post-item?id=${state.data.id}`\r\n      );\r\n\r\n      const resData = await res.json();\r\n      if (res.ok) {\r\n        dispatch({\r\n          type: REQUEST_ACTION_TYPE.SUCCESS,\r\n          payload: convertData(resData),\r\n        });\r\n      } else {\r\n        dispatch({\r\n          type: REQUEST_ACTION_TYPE.ERROR,\r\n          payload: resData.message,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: REQUEST_ACTION_TYPE.ERROR,\r\n        payload: error.message,\r\n      });\r\n    }\r\n  }, [state.data.id]);\r\n\r\n  const convertData = ({ post }) => ({\r\n    id: post.id,\r\n    username: post.username,\r\n    text: post.text,\r\n    date: getDate(post.date),\r\n\r\n    reply: post.reply.reverse().map(({ id, username, text, date }) => ({\r\n      id,\r\n      username,\r\n      text,\r\n      date: getDate(date),\r\n    })),\r\n\r\n    isEmpty: post.reply.length === 0,\r\n  });\r\n\r\n  const [isOpen, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(!isOpen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isOpen === true) {\r\n      getData();\r\n    }\r\n  }, [getData, isOpen]);\r\n\r\n  return (\r\n    <Box style={{ padding: \"0\" }}>\r\n      <div\r\n        style={{\r\n          padding: \"20px\",\r\n          cursor: \"pointer\",\r\n        }}\r\n        onClick={handleOpen}\r\n      >\r\n        <PostContent\r\n          username={state.data.username}\r\n          date={state.data.date}\r\n          text={state.data.text}\r\n        />\r\n      </div>\r\n\r\n      {isOpen && (\r\n        <div style={{ padding: \"0 20px 20px 20px\" }}>\r\n          <Grid>\r\n            <Box className=\"post-item__inside-box\">\r\n              <PostCreate\r\n                placeholder=\"Post your reply!\"\r\n                button=\"Reply\"\r\n                id={state.data.id}\r\n                onCreate={getData}\r\n              />\r\n            </Box>\r\n            {state.status === LOAD_STATUS.PROGRESS && (\r\n              <Fragment>\r\n                <Box>\r\n                  <Skeleton />\r\n                </Box>\r\n                <Box>\r\n                  <Skeleton />\r\n                </Box>\r\n              </Fragment>\r\n            )}\r\n\r\n            {state.status === LOAD_STATUS.ERROR && (\r\n              <Alert status={state.status} message={state.message} />\r\n            )}\r\n            {state.status === LOAD_STATUS.SUCCESS &&\r\n              state.data.isEmpty === false &&\r\n              state.data.reply.map((item) => (\r\n                <Fragment key={item.id}>\r\n                  <Box>\r\n                    <PostContent {...item} />\r\n                  </Box>\r\n                </Fragment>\r\n              ))}\r\n          </Grid>\r\n        </div>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\n// Цей файл є контейнером, який виводить окремий допис та форму створення відповіді.\r\n\r\n// Основний функціонал:\r\n\r\n// Здійснення запиту до серверу для отримання даних про заданий допис при кожному відкритті допису.\r\n// Виведення деталей допису, включаючи відповіді на нього.\r\n// Підтримка можливості відкриття та закриття окремих дописів.\r\n// Виведення компонентів завантаження та поля повідомлення про помилки при завантаженні даних.\r\n\r\n// Цей файл використовує React, JavaScript ES6, та Fetch API:\r\n\r\n// Використовує React Hook useReducer для зміни станів відповіді на запит, при цьому використовується reducer (requestReducer) та початковий стан (requestInitialState) з файлу 'request.js'.\r\n// Функція getData: створює та виконує запит GET до серверу для отримання даних про вказаний допис.\r\n// Функція convertData: обробляє відповідь від сервера та формує структуризований об'єкт даних.\r\n// Функція handleOpen: змінює стан isOpen, що визначає чи відкритий детальний вигляд допису.\r\n\r\n// ### Детальний опис подій, функцій, методів та властивостей у файлі\r\n\r\n// #### 1. Стан та функції:\r\n// 1. **data**\r\n//    - **Тип**: State\r\n//    - **Опис**: Об’єкт, що містить дані про пост та його відповіді.\r\n//    - **Початкове значення**: Об'єкт з властивостями `id`, `username`, `text`, `date`, та `reply` (значення початково `null`).\r\n\r\n// 2. **status**\r\n//    - **Тип**: State\r\n//    - **Опис**: Визначає статус запиту: `null`, `LOAD_STATUS.PROGRESS`, `LOAD_STATUS.SUCCESS`, або `LOAD_STATUS.ERROR`.\r\n\r\n// 3. **message**\r\n//    - **Тип**: State\r\n//    - **Опис**: Повідомлення про помилку або статус операції.\r\n\r\n// 4. **getData()**\r\n//    - **Тип**: Функція\r\n//    - **Дії**: Виконує запит на сервер для отримання даних про пост та його відповідей. При успішному запиті оновлює `data` та `status`, в іншому випадку встановлює повідомлення про помилку та статус `LOAD_STATUS.ERROR`.\r\n\r\n// 5. **convertData()**\r\n//    - **Тип**: Функція\r\n//    - **Дії**: Конвертує дані про пост та його відповіді у відповідний формат.\r\n\r\n// 6. **isOpen**\r\n//    - **Тип**: State\r\n//    - **Опис**: Визначає, чи відкрито вікно з відповідями на пост.\r\n\r\n// 7. **handleOpen()**\r\n//    - **Тип**: Функція\r\n//    - **Дії**: Обробляє відкриття або закриття вікна з відповідями, викликаючи `getData`, якщо `status` є `null`.\r\n\r\n// #### Компоненти і візуальне відображення:\r\n// 1. **Відображення посту**:\r\n//    - Реалізоване через компонент `PostContent` та блочний елемент.\r\n//    - Відкриття посту та виведення відповідей здійснюється через обр облюючи клік на `div` обгортці посту.\r\n\r\n// 2. **Відображення відповідей**:\r\n//    - Виведення відповідей та відображення форми для їх створення реалізовані через компонент `PostCreate`.\r\n//    - Відображення індикатора завантаження (`Skeleton`) увипадку процесу завантаження.\r\n\r\n// 3. **Alert**:\r\n//    - Відображенна у випадку помилки під час запиту до сервера.\r\n\r\n// ### Загальний опис:\r\n// Файл `Container.js` містить реалізацію функціонально компонента відображення посту та його відповідей, обробку стану та подій під час змін стану, отримання даних з сервера та їх вівдення. Компонент відображує пост разом з відповідями, обробляючи статуси операцій та перехід між режимами відображення.\r\n"],"names":["Component","_ref","username","date","text","value","theme","useContext","ThemeContext","_jsxs","Grid","children","className","style","color","_jsx","memo","Container","id","state","dispatch","useReducer","requestReducer","requestInitialState","data","reply","getData","useCallback","async","type","REQUEST_ACTION_TYPE","PROGRESS","res","fetch","resData","json","ok","SUCCESS","payload","convertData","ERROR","message","error","_ref2","post","getDate","reverse","map","_ref3","isEmpty","length","isOpen","setOpen","useState","useEffect","Box","padding","cursor","onClick","handleOpen","PostContent","PostCreate","placeholder","button","onCreate","status","LOAD_STATUS","Fragment","Skeleton","Alert","item"],"sourceRoot":""}