{"version":3,"file":"static/js/760.eb5698c0.chunk.js","mappings":"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","sources":["component/post-content/index.js","container/post-item/index.js"],"sourcesContent":["import { memo, useContext } from \"react\";\r\nimport \"./index.css\";\r\nimport Grid from \"../grid\";\r\nimport { ThemeContext } from \"../../App\";\r\n\r\nfunction Component({ username, date, text }) {\r\n  const { value: theme } = useContext(ThemeContext);\r\n  return (\r\n    <Grid>\r\n      <div className=\"post-content\">\r\n        <span\r\n          style={{\r\n            color: `var(--${theme}-text-color-user)`,\r\n          }}\r\n          className=\"post-content__username\"\r\n        >\r\n          @{username}\r\n        </span>\r\n        <span\r\n          style={{\r\n            color: `var(--${theme}-text-color-date)`,\r\n          }}\r\n          className=\"post-content__date\"\r\n        >\r\n          {date}\r\n        </span>\r\n      </div>\r\n      <p\r\n        style={{\r\n          color: `var(--${theme}-text-color)`,\r\n        }}\r\n        className=\"post-content__text\"\r\n      >\r\n        {text}\r\n      </p>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default memo(Component);\r\n","// file post-item.js\r\nimport { useState, Fragment, useEffect, useReducer, useCallback } from \"react\";\r\nimport \"./style.css\";\r\nimport Grid from \"../../component/grid\";\r\nimport Box from \"../../component/box\";\r\nimport PostCreate from \"../post-create\";\r\nimport { Alert, Skeleton, LOAD_STATUS } from \"../../component/load\";\r\nimport { getDate } from \"../../util/getDate\";\r\nimport PostContent from \"../../component/post-content\";\r\nimport {\r\n  requestInitialState,\r\n  requestReducer,\r\n  REQUEST_ACTION_TYPE,\r\n} from \"../../util/request\";\r\n\r\nimport {\r\n  getPostById,\r\n  createReply,\r\n  deletePost,\r\n  deleteReply,\r\n} from \"../../util/mockData\";\r\n\r\nexport default function Container({ id, username, text, date, onRemovePost }) {\r\n  const [state, dispatch] = useReducer(\r\n    requestReducer,\r\n    requestInitialState,\r\n    (state) => ({ ...state, data: { id, username, text, date, reply: [] } })\r\n  );\r\n\r\n  const addReply = useCallback(\r\n    (newReply) => {\r\n      dispatch({\r\n        type: REQUEST_ACTION_TYPE.SUCCESS,\r\n        payload: {\r\n          ...state.data,\r\n          reply: [newReply, ...state.data.reply],\r\n        },\r\n      });\r\n    },\r\n    [state.data]\r\n  );\r\n\r\n  const getData = useCallback(() => {\r\n    dispatch({ type: REQUEST_ACTION_TYPE.PROGRESS });\r\n\r\n    try {\r\n      const post = getPostById(state.data.id);\r\n\r\n      if (post) {\r\n        dispatch({\r\n          type: REQUEST_ACTION_TYPE.SUCCESS,\r\n          payload: convertData({ post }),\r\n        });\r\n      } else {\r\n        throw new Error(\"Post not found\");\r\n      }\r\n    } catch (error) {\r\n      dispatch({\r\n        type: REQUEST_ACTION_TYPE.ERROR,\r\n        payload: error.message,\r\n      });\r\n    }\r\n  }, [state.data.id]);\r\n\r\n  const convertData = ({ post }) => ({\r\n    id: post.id,\r\n    username: post.username,\r\n    text: post.text,\r\n    date: getDate(post.date),\r\n\r\n    reply: (post.reply || []).reverse().map(({ id, username, text, date }) => ({\r\n      id,\r\n      username,\r\n      text,\r\n      date: getDate(date),\r\n    })),\r\n\r\n    isEmpty: !post.reply || post.reply.length === 0,\r\n  });\r\n\r\n  const [isOpen, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(!isOpen);\r\n  };\r\n\r\n  const handleReply = async (data) => {\r\n    try {\r\n      const newReply = await createReply(state.data.id, data);\r\n      addReply(newReply);\r\n      getData(); // Викликаємо функцію getData, щоб оновити стан компонента\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      getData();\r\n    }\r\n  }, [getData, isOpen]);\r\n\r\n  const handleDeletePost = (postId) => {\r\n    deletePost(postId);\r\n    if (onRemovePost) {\r\n      onRemovePost(postId); // Інформуємо пост-лист про видалення\r\n    }\r\n    // getData(); // Оновлює стан після видалення\r\n  };\r\n\r\n  const handleDeleteReply = (postId, replyId) => {\r\n    deleteReply(postId, replyId);\r\n    console.log(\"Deleting reply with id:\", replyId); // Логування\r\n    getData(); // Оновлює стан після видалення\r\n  };\r\n\r\n  return (\r\n    <Box style={{ padding: \"0\" }}>\r\n      <div className=\"post-header\">\r\n        <div className=\"post-header-data\" onClick={handleOpen}>\r\n          <PostContent\r\n            username={state.data.username}\r\n            date={state.data.date}\r\n            text={state.data.text}\r\n          />\r\n        </div>\r\n        <button\r\n          onClick={() => handleDeletePost(state.data.id)}\r\n          className=\"field-form__button-del\"\r\n        >\r\n          X\r\n        </button>\r\n      </div>\r\n\r\n      {isOpen && (\r\n        <div style={{ padding: \"0 20px 20px 20px\" }}>\r\n          <Grid>\r\n            <Box className=\"post-item__inside-box\">\r\n              <PostCreate\r\n                placeholder=\"Post your reply!\"\r\n                button=\"Reply\"\r\n                id={state.data.id}\r\n                onSubmit={handleReply}\r\n                onCreate={getData}\r\n              />\r\n            </Box>\r\n            {state.status === LOAD_STATUS.PROGRESS && (\r\n              <Fragment>\r\n                <Box>\r\n                  <Skeleton />\r\n                </Box>\r\n                <Box>\r\n                  <Skeleton />\r\n                </Box>\r\n              </Fragment>\r\n            )}\r\n\r\n            {state.status === LOAD_STATUS.ERROR && (\r\n              <Alert status={state.status} message={state.message} />\r\n            )}\r\n            {state.status === LOAD_STATUS.SUCCESS &&\r\n              !state.data.isEmpty &&\r\n              state.data.reply.map((item) => (\r\n                <Fragment key={item.id}>\r\n                  <Box className=\"post-reply\">\r\n                    <PostContent {...item} />\r\n                    <button\r\n                      onClick={() => handleDeleteReply(state.data.id, item.id)}\r\n                      className=\"field-form__button-del\"\r\n                    >\r\n                      X\r\n                    </button>\r\n                  </Box>\r\n                </Fragment>\r\n              ))}\r\n          </Grid>\r\n        </div>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\n// Цей файл є контейнером, який виводить окремий допис та форму створення відповіді.\r\n\r\n// Основний функціонал:\r\n\r\n// Здійснення запиту до серверу для отримання даних про заданий допис при кожному відкритті допису.\r\n// Виведення деталей допису, включаючи відповіді на нього.\r\n// Підтримка можливості відкриття та закриття окремих дописів.\r\n// Виведення компонентів завантаження та поля повідомлення про помилки при завантаженні даних.\r\n\r\n// Цей файл використовує React, JavaScript ES6, та Fetch API:\r\n\r\n// Використовує React Hook useReducer для зміни станів відповіді на запит, при цьому використовується reducer (requestReducer) та початковий стан (requestInitialState) з файлу 'request.js'.\r\n// Функція getData: створює та виконує запит GET до серверу для отримання даних про вказаний допис.\r\n// Функція convertData: обробляє відповідь від сервера та формує структуризований об'єкт даних.\r\n// Функція handleOpen: змінює стан isOpen, що визначає чи відкритий детальний вигляд допису.\r\n\r\n// ### Детальний опис подій, функцій, методів та властивостей у файлі\r\n\r\n// #### 1. Стан та функції:\r\n// 1. **data**\r\n//    - **Тип**: State\r\n//    - **Опис**: Об’єкт, що містить дані про пост та його відповіді.\r\n//    - **Початкове значення**: Об'єкт з властивостями `id`, `username`, `text`, `date`, та `reply` (значення початково `null`).\r\n\r\n// 2. **status**\r\n//    - **Тип**: State\r\n//    - **Опис**: Визначає статус запиту: `null`, `LOAD_STATUS.PROGRESS`, `LOAD_STATUS.SUCCESS`, або `LOAD_STATUS.ERROR`.\r\n\r\n// 3. **message**\r\n//    - **Тип**: State\r\n//    - **Опис**: Повідомлення про помилку або статус операції.\r\n\r\n// 4. **getData()**\r\n//    - **Тип**: Функція\r\n//    - **Дії**: Виконує запит на сервер для отримання даних про пост та його відповідей. При успішному запиті оновлює `data` та `status`, в іншому випадку встановлює повідомлення про помилку та статус `LOAD_STATUS.ERROR`.\r\n\r\n// 5. **convertData()**\r\n//    - **Тип**: Функція\r\n//    - **Дії**: Конвертує дані про пост та його відповіді у відповідний формат.\r\n\r\n// 6. **isOpen**\r\n//    - **Тип**: State\r\n//    - **Опис**: Визначає, чи відкрито вікно з відповідями на пост.\r\n\r\n// 7. **handleOpen()**\r\n//    - **Тип**: Функція\r\n//    - **Дії**: Обробляє відкриття або закриття вікна з відповідями, викликаючи `getData`, якщо `status` є `null`.\r\n\r\n// #### Компоненти і візуальне відображення:\r\n// 1. **Відображення посту**:\r\n//    - Реалізоване через компонент `PostContent` та блочний елемент.\r\n//    - Відкриття посту та виведення відповідей здійснюється через обр облюючи клік на `div` обгортці посту.\r\n\r\n// 2. **Відображення відповідей**:\r\n//    - Виведення відповідей та відображення форми для їх створення реалізовані через компонент `PostCreate`.\r\n//    - Відображення індикатора завантаження (`Skeleton`) увипадку процесу завантаження.\r\n\r\n// 3. **Alert**:\r\n//    - Відображенна у випадку помилки під час запиту до сервера.\r\n\r\n// ### Загальний опис:\r\n// Файл `Container.js` містить реалізацію функціонально компонента відображення посту та його відповідей, обробку стану та подій під час змін стану, отримання даних з сервера та їх вівдення. Компонент відображує пост разом з відповідями, обробляючи статуси операцій та перехід між режимами відображення.\r\n"],"names":["Component","_ref","username","date","text","value","theme","useContext","ThemeContext","_jsxs","Grid","children","className","style","color","_jsx","memo","Container","id","onRemovePost","state","dispatch","useReducer","requestReducer","requestInitialState","data","reply","addReply","useCallback","newReply","type","REQUEST_ACTION_TYPE","SUCCESS","payload","getData","PROGRESS","post","getPostById","Error","convertData","error","ERROR","message","_ref2","getDate","reverse","map","_ref3","isEmpty","length","isOpen","setOpen","useState","useEffect","Box","padding","onClick","handleOpen","PostContent","handleDeletePost","postId","deletePost","PostCreate","placeholder","button","onSubmit","async","createReply","console","onCreate","status","LOAD_STATUS","Fragment","Skeleton","Alert","item","handleDeleteReply","replyId","deleteReply","log"],"sourceRoot":""}