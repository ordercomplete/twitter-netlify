class Post {
  static #list = []
  static #count = 1
  constructor(username, text) {
    this.id = Post.#count++
    this.username = username
    this.text = text
    this.date = new Date().getTime()
    this.reply = []
  }

  static create(username, text, post) {
    const newPost = new Post(username, text)
    if (post) {
      post.reply.push(newPost)
    } else {
      this.#list.push(newPost)
    }

    console.log(this.#list)

    return newPost
  }

  static getById(id) {
    return (
      this.#list.find((item) => item.id === Number(id)) ||
      null
    )
  }

  static getList = () => this.#list
}

module.exports = {
  Post,
}

// ### Детальний опис класу `Post` та його методів

// #### Властивості та методи класу `Post`
// 1. **`#list` та `#count`**:
//    - **Тип**: Приватні статичні властивості.
//    - **Опис**: `#list` зберігає список усіх створених постів, а `#count` використовується для створення унікальних ідентифікаторів постів.
// 2. **Конструктор `constructor(username, text)`**:
//    - **Параметри**: `username` - ім'я користувача, `text` - текст посту.
//    - **Дії**: Створює об'єкт посту з унікальним ідентифікатором, ім'ям користувача, текстом посту, датою створення та пустим списком відповідей.
// 3. **Статичний метод `create(username, text, post)`**:
//    - **Параметри**: `username` - ім'я користувача, `text` - текст посту, `post` - опціональний параметр для відповідей на існуючий пост.
//    - **Дії**: Створює новий пост з вказаним користувачем і текстом. Якщо є пост для відповідей, додає новий пост до списку відповідей цього посту; в іншому випадку, додає цей пост до загального списку.
//    - Виводить у консоль список усіх постів після створення.
// 4. **Статичний метод `getById(id)`**:
//    - **Параметр**: `id` - ідентифікатор посту, який шукається.
//    - **Дії**: Повертає об'єкт посту, який має вказаний ідентифікатор, або `null`, якщо пост не знайдений.
// 5. **Статичний метод `getList`**:
//    - **Дії**: Повертає список усіх створених постів.

// #### Експорт класу
// 6. **Експорт класу `Post`**:
//    - **Дії**: Експортує клас `Post` для використання в інших частинах програми.

// Цей клас `Post` відповідає за створення, управління та доступ до постів у програмі. Він має можливість створення нових постів, відповідно до вхідних даних, визначення посту за його ідентифікатором та отримання списку усіх створених постів. Клас використовує приватні властивості для зберігання списку постів та лічильника для генерації унікальних ідентифікаторів.
