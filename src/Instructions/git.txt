Ось основні команди для роботи з Git:

1. **Ініціалізація репозиторію**:
   - `git init` - ініціалізує новий Git-репозиторій у поточній директорії.

2. **Клонування репозиторію**:
   - `git clone <url>` - клонує існуючий репозиторій за вказаною URL-адресою.

3. **Додавання файлів до індексу**:
   - `git add <файл>` - додає вказаний файл до індексу.
   - `git add .` - додає всі змінені файли до індексу.

4. **Фіксація змін**:
   - `git commit -m "Повідомлення про зміни"` - фіксує зміни з вказаним повідомленням.
   - `git commit -am "Повідомлення про зміни"` - додає всі змінені файли до індексу та фіксує зміни.

5. **Перегляд стану репозиторію**:
   - `git status` - показує поточний стан робочої директорії та індексу.
   - `git log` - показує історію фіксацій.

6. **Робота з віддаленими репозиторіями**:
   - `git remote add <назва> <url>` - додає нове віддалене посилання.
   - `git push <назва> <гілка>` - відправляє локальні зміни на вказане віддалене посилання.
   - `git pull <назва> <гілка>` - отримує зміни з вказаного віддаленого посилання.

7. **Робота з гілками**:
   - `git branch` - показує список локальних гілок.
   - `git branch <назва>` - створює нову гілку.
   - `git checkout <назва>` - переключається на вказану гілку.
   - `git merge <назва>` - зливає вказану гілку з поточною.

8. **Відновлення та відміна змін**:
   - `git reset <файл>` - видаляє вказаний файл з індексу.
   - `git revert <хеш>` - створює нову фіксацію, яка скасовує зміни вказаної фіксації.
   - `git checkout -- <файл>` - відновлює вказаний файл до стану останньої фіксації.

9. **Інші корисні команди**:
   - `git stash` - зберігає поточні незафіксовані зміни.
   - `git stash apply` - застосовує збережені зміни.
   - `git clean -f` - видаляє всі незафіксовані файли.

Це лише основні команди, які часто використовуються під час роботи з Git. Існує багато інших команд та опцій, які можуть бути корисними в залежності від ваших потреб. 

Якщо ви отримуєте помилку "fatal: not a git repository (or any of the parent directories): .git" при виконанні команди `git status`, це означає, що ви знаходитесь у директорії, яка не є Git-репозиторієм.

Ось кілька кроків, які ви можете виконати для вирішення цієї проблеми:

1. **Перевірте, чи ви знаходитесь у правильній директорії**:
   - Використайте команду `pwd` (print working directory), щоб перевірити, в якій директорії ви знаходитесь.
   - Переконайтесь, що ви знаходитесь у директорії, яка містить Git-репозиторій.

2. **Ініціалізуйте новий Git-репозиторій**:
   - Якщо ви знаходитесь у правильній директорії, але вона не є Git-репозиторієм, ви можете ініціалізувати новий репозиторій за допомогою команди:
     ```
     git init
     ```
   - Ця команда створить нову директорію `.git` у поточній директорії, ініціалізуючи таким чином новий Git-репозиторій.

3. **Клонуйте існуючий Git-репозиторій**:
   - Якщо ви хочете працювати з існуючим Git-репозиторієм, ви можете клонувати його за допомогою команди:
     ```
     git clone <url_репозиторію>
     ```
   - Ця команда створить нову директорію з клонованим репозиторієм у поточній директорії.

4. **Перейдіть до директорії Git-репозиторію**:
   - Якщо ви знаєте, де знаходиться ваш Git-репозиторій, перейдіть до цієї директорії за допомогою команди `cd`:
     ```
     cd /шлях/до/репозиторію
     ```
   - Після переходу до директорії репозиторію ви повинні бути здатні виконувати команди Git, такі як `git status`.

Переконайтесь, що ви знаходитесь у правильній директорії, яка містить Git-репозиторій, або ініціалізуйте новий репозиторій, якщо це необхідно. Після цього ви зможете використовувати команди Git без помилок. 