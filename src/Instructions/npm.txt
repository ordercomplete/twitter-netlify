Ось основні команди для роботи з менеджером пакетів npm:

1. **Встановлення пакета**:
   - `npm install <пакет>` - встановлює вказаний пакет у проект.
   - `npm i <пакет>` - скорочена форма команди `npm install`.
   - `npm install <пакет> --save` - встановлює пакет і додає його до файлу `package.json`.
   - `npm install <пакет> --save-dev` - встановлює пакет як залежність для розробки.

2. **Видалення пакета**:
   - `npm uninstall <пакет>` - видаляє вказаний пакет з проекту.
   - `npm un <пакет>` - скорочена форма команди `npm uninstall`.

3. **Оновлення пакетів**:
   - `npm update` - оновлює всі встановлені пакети до останніх версій.
   - `npm update <пакет>` - оновлює вказаний пакет до останньої версії.

4. **Ініціалізація проекту**:
   - `npm init` - створює новий файл `package.json` для проекту.
   - `npm init -y` - створює файл `package.json` з налаштуваннями за замовчуванням.

5. **Перегляд інформації**:
   - `npm list` - показує список встановлених пакетів у проекті.
   - `npm list -g` - показує список глобально встановлених пакетів.
   - `npm info <пакет>` - показує інформацію про вказаний пакет.

6. **Публікація пакета**:
   - `npm adduser` - реєструє обліковий запис на npm.
   - `npm publish` - публікує пакет на npm.

7. **Керування скриптами**:
   - `npm run <скрипт>` - виконує вказаний скрипт, визначений у `package.json`.

8. **Керування версіями**:
   - `npm version <major|minor|patch>` - збільшує версію пакета на вказану величину.

9. **Інші команди**:
   - `npm cache clean --force` - очищує кеш npm.
   - `npm audit` - перевіряє проект на наявність вразливостей.
   - `npm outdated` - показує список застарілих пакетів.

Ці команди є найбільш поширеними при роботі з npm. Існує багато інших команд та опцій, які можуть бути корисними залежно від ваших потреб. 

Для відв'язки та прив'язки репозиторію в Git використовуються наступні команди:

1. **Відв'язка репозиторію**:
   - Щоб відв'язати поточний репозиторій, використовуйте команду:
     ```
     git remote remove origin
     ```
   - Ця команда видаляє посилання на віддалений репозиторій з назвою "origin".

2. **Прив'язка репозиторію**:
   - Щоб прив'язати новий віддалений репозиторій, використовуйте команду:
     ```
     git remote add origin <url_нового_репозиторію>
     ```
   - Ця команда додає нове посилання на віддалений репозиторій з назвою "origin" за вказаною URL-адресою.

Приклад:

Припустимо, ви хочете відв'язати поточний репозиторій та прив'язати новий:

1. Відв'язати поточний репозиторій:
   ```
   git remote remove origin
   ```

2. Прив'язати новий репозиторій:
   ```
   git remote add origin https://github.com/username/new-repository.git
   ```

Після виконання цих команд ваш локальний репозиторій буде прив'язаний до нового віддаленого репозиторію за вказаною URL-адресою.

Щоб перевірити, до якого віддаленого репозиторію прив'язаний ваш локальний репозиторій, ви можете використати команду:

```
git remote -v
```

Ця команда відобразить список усіх віддалених репозиторіїв, до яких прив'язаний ваш локальний репозиторій, разом з їхніми URL-адресами. 